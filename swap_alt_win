#!/usr/bin/env python3

import subprocess
import sys
import json
import argparse


ALTWIN_OPTION = "altwin:swap_alt_win"

def cmd(option, args):
    return f"gsettings {option} org.gnome.desktop.input-sources xkb-options {args}"

def toggle(existing_values):
    if ALTWIN_OPTION in existing_values:
        existing_values.remove(ALTWIN_OPTION)
    else:
        existing_values.append(ALTWIN_OPTION)
    return existing_values

def on(existing_values):
    if ALTWIN_OPTION not in existing_values:
        existing_values.append(ALTWIN_OPTION)
    return existing_values

def off(existing_values):
    if ALTWIN_OPTION in existing_values:
        existing_values.remove(ALTWIN_OPTION)
    return existing_values

def status(existing_values):
    if ALTWIN_OPTION in existing_values:
        print("swap_alt_win: on")
    else:
        print("swap_alt_win: off")

def run(args):
    output = subprocess.run(cmd("get", ""), shell=True, capture_output=True)
    existing_values = json.loads(output.stdout.decode().replace('\'', '"'))

    if args.altwin == "status":
        status(existing_values)
        return

    if args.altwin == "toggle":
        updated_values = toggle(existing_values)
    elif args.altwin == "on":
        updated_values = on(existing_values)
    elif args.altwin == "off":
        updated_values = off(existing_values)
    else:
        raise ValueError(f"Unsupported argument {sys.argv}")

    subprocess.run(cmd("set", f"\"{updated_values}\""), shell=True)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--altwin', type=str, default="toggle", help="Argument for altwin setting")
    parser.add_argument('--verbose', action='store_true', help="Show verbose results")
    args = parser.parse_args()

    run(args)
